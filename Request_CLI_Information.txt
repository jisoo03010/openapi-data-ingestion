# OpenAPI 별 지정 값
# - service_key : API 서비스 키
# - query_params : API 호출 시 필요한 파라미터 정보
# - table_name : 테이블 명
# - columns_str : 테이블 컬럼명 (지정하는 이유: API 호출 시 키 값으로 가져올 수도 있었으나, 특정 몇몇 API의 키 값이 한국어로 되어 있어 영문으로 직접 지정하여 구현하였음.)
# - body : API 호출 시 필요한 body 정보 (API마다 가져오려는 상위 키 값의 이름이 다름)
# - subparsers : 요청하려는 API에 대해 상세 조회를 수행할 때 필요한 파라미터를 받기 위한 설정을 구성


/** 새로운 OpenAPI 코드 추가 시 설정 순서 **/
1. get_parser() 메서드에서 서버 파서 설정하기
2. if __name__ == '__main__': main문에서 조건문에 따른 OpenAPI 함수 호출하기
3. 해당 함수에서 데이터를 넣을 해당 (테이블 명, 컬럼 명) 등등 을 지정 후 해당 정보들을 response_data()의 파라미터로 넘긴다.
4. response_data() json데이터로 변환 후 save_to_database() 실제 DB에 저장을 수행하는 함수에 파라미터를 전달한다.
5. db_connect() DB연결 후 쿼리 생성 후 쿼리 실행시켜, 데이터를 저장시킨다. (성공 시 메시지 출력)

/**  수질 조회 API명령어  **/
python main.py water_quality

/**  수위, 강수량 실시간 조회 API명령어  **/
python main.py  water_level_rainfall --apiName=(waterlevel or rainfall)

/**  수위 및 강수량 관측소 정보 조회 API명령어  **/
python main.py water_level_rainfall_sub --apiName=(waterlevel or rainfall)


-- 필요한 예외처리 -- 
1. 관측소 정보 조회 시 중복 PRimary key에 대한 처리 




-- 추가 해야하는 메서드 리스트 
1.  weather 
2. atmoshpere
3. 